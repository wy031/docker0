version
指定本 yml 依从的 compose 哪个版本制定的

build
指定为构建镜像上下文路径：
version: "3.7"
services:
  webapp:
    build:
      context: ./dir
      dockerfile: Dockerfile-alternate
      args:
        buildno: 1
      labels:
        - "com.example.description=Accounting webapp"
        - "com.example.department=Finance"
        - "com.example.label-with-empty-value"
      target: prod
context：上下文路径。
dockerfile：指定构建镜像的 Dockerfile 文件名。
args：添加构建参数，这是只能在构建过程中访问的环境变量。
labels：设置构建镜像的标签。
target：多层构建，可以指定构建哪一层。


cap_add
cap_drop
添加或删除容器拥有的宿主机的内核功能。

cap_add:
  - ALL # 开启全部权限

cap_drop:
  - SYS_PTRACE # 关闭 ptrace权限
cgroup_parent
为容器指定父 cgroup 组，意味着将继承该组的资源限制。

cgroup_parent: m-executor-abcd

command
覆盖容器启动的默认命令。
command: ["bundle", "exec", "thin", "-p", "3000"]

container_name
指定自定义容器名称，而不是生成的默认名称。
container_name: my-web-container

depends_on
设置依赖关系。
docker-compose up ：以依赖性顺序启动服务。在以下示例中，先启动 db 和 redis ，才会启动 web。
docker-compose up SERVICE ：自动包含 SERVICE 的依赖项。在以下示例中，docker-compose up web 还将创建并启动 db 和 redis。
docker-compose stop ：按依赖关系顺序停止服务。在以下示例中，web 在 db 和 redis 之前停止。
depends_on:
      - db
      - redis

deploy
指定与服务的部署和运行有关的配置。只在 swarm 模式下才会有用
version: "3.7"
services:
  redis:
    image: redis:alpine
    deploy:
      # mode：指定服务提供的模式
      # replicated：复制服务，复制指定服务到集群的机器上。global：全局服务，服务将部署至集群的每个节点
      mode：replicated
      # mode 为 replicated 时，需要使用此参数配置具体运行的节点数量
      replicas: 6
      # endpoint_mode：访问集群服务的方式。endpoint_mode: vip 
      # Docker 集群服务一个对外的虚拟 ip。所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器。
      # DNS 轮询（DNSRR）。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址
      endpoint_mode: dnsrr
      # labels：在服务上设置标签。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。
      labels: 
        description: "This redis service label"
      # resources：配置服务器资源使用的限制
      # 配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M
      # restart_policy：配置如何在退出容器时重新启动容器。
      # condition：可选 none，on-failure 或者 any（默认值：any）。
      # delay：设置多久之后重启（默认值：0）。
      # max_attempts：尝试重新启动容器的次数，超出次数，则不再尝试（默认值：一直重试）。
      # window：设置容器重启超时时间（默认值：0）。
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


# rollback_config：
# 配置在更新失败的情况下应如何回滚服务。
# parallelism：一次要回滚的容器数。如果设置为0，则所有容器将同时回滚。
# delay：每个容器组回滚之间等待的时间（默认为0s）。
# failure_action：如果回滚失败，该怎么办。其中一个 continue 或者 pause（默认pause）。
# monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为0s）。
# max_failure_ratio：在回滚期间可以容忍的故障率（默认为0）。
# order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first ）。


# https://www.runoob.com/docker/docker-compose.html